# schools/management/commands/fixduplicateschools.py

from django.core.management.base import BaseCommand
from django.contrib.auth.models import Group
from schools.models import School
from django.db.models import Count

class Command(BaseCommand):
    help = """
    Finds groups linked to multiple schools and fixes the conflict by keeping the school
    with the highest ID and PERMANENTLY DELETING the others.
    
    WARNING: This is a destructive operation. Backup your database before running.
    You MUST use the --confirm flag to proceed.
    """

    def add_arguments(self, parser):
        # –ê—é—É–ª–≥“Ø–π –±–∞–π–¥–ª—ã–Ω “Ø“Ø–¥–Ω—ç—ç—Å –∑–∞–∞–≤–∞–ª --confirm –≥—ç–∂ –±–∏—á–∏–∂ –±–∞–π–∂ –∞–∂–∏–ª–ª–∞–¥–∞–≥ –±–æ–ª–≥–æ—Ö
        parser.add_argument(
            '--confirm',
            action='store_true',
            help='–≠–Ω—ç –∫–æ–º–º–∞–Ω–¥ ”©–≥”©–≥–¥”©–ª —É—Å—Ç–≥–∞—Ö—ã–≥ –∑”©–≤—à”©”©—Ä—á –±—É–π–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö.',
        )

    def handle(self, *args, **options):
        # --confirm –≥—ç—Å—ç–Ω —Å–æ–Ω–≥–æ–ª—Ç ”©–≥”©”©–≥“Ø–π –±–æ–ª –∫–æ–º–º–∞–Ω–¥—ã–≥ –∞–∂–∏–ª–ª—É—É–ª–∞—Ö–≥“Ø–π
        if not options['confirm']:
            self.stdout.write(self.style.ERROR(
                "üõë  –ê–ù–•–ê–ê–†–£–£–õ–ì–ê: –≠–Ω—ç –∫–æ–º–º–∞–Ω–¥ –°—É—Ä–≥—É—É–ª–∏–π–Ω –±–∏—á–ª—ç–≥–∏–π–≥ –ë“Æ–†–ú”®–°”®–ù –£–°–¢–ì–ê–ù–ê."
            ))
            self.stdout.write(self.style.WARNING(
                "“Æ—Ä–≥—ç–ª–∂–ª“Ø“Ø–ª—ç—Ö–∏–π–Ω —Ç—É–ª–¥ '--confirm' –≥—ç—Å—ç–Ω –Ω—ç–º—ç–ª—Ç —Å–æ–Ω–≥–æ–ª—Ç—ã–≥ –∞—à–∏–≥–ª–∞–Ω–∞ —É—É."
            ))
            self.stdout.write(self.style.WARNING(
                "–ñ–∏—à—ç—ç: python manage.py fixduplicateschools --confirm"
            ))
            return

        self.stdout.write(self.style.WARNING(
            "üî•  –°—É—Ä–≥—É—É–ª–∏–π–Ω –∏–ª“Ø“Ø–¥—ç–ª –±–∏—á–ª—ç–≥–∏–π–≥ —É—Å—Ç–≥–∞—Ö “Ø–π–ª–¥—ç–ª —ç—Ö—ç–ª–ª—ç—ç..."
        ))

        # 1. –ù—ç–≥—ç—ç—Å –æ–ª–æ–Ω —Å—É—Ä–≥—É—É–ª—å—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥—Å–æ–Ω –±“Ø–ª–≥“Ø“Ø–¥–∏–π–Ω ID-–≥ –æ–ª–æ—Ö
        duplicate_group_ids = School.objects.values('group_id').annotate(
            group_count=Count('group_id')
        ).filter(
            group_count__gt=1
        ).values_list('group_id', flat=True)

        if not list(duplicate_group_ids):
            self.stdout.write(self.style.SUCCESS("‚úîÔ∏è  –ó”©—Ä—á–∏–ª—Ç—ç–π —Ö–æ–ª–±–æ–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π."))
            return

        self.stdout.write(f"‚ö†Ô∏è  –û–ª–¥—Å–æ–Ω {len(list(duplicate_group_ids))} –∑”©—Ä—á–∏–ª—Ç—ç–π –±“Ø–ª–≥–∏–π–Ω —Ö–æ–ª–±–æ–ª—Ç—ã–≥ –∑–∞—Å–≤–∞—Ä–ª–∞–∂ –±–∞–π–Ω–∞...")

        total_deleted = 0
        # 2. –ó”©—Ä—á–∏–ª—Ç—ç–π –±“Ø–ª—ç–≥ —Ç—É—Å –±“Ø—Ä—ç—ç—Ä –¥–∞–≤—Ç–∞—Ö
        for group_id in duplicate_group_ids:
            if group_id is None:
                continue

            try:
                group = Group.objects.get(id=group_id)
                self.stdout.write(self.style.NOTICE(f"\n- –ó”©—Ä—á–ª–∏–π–≥ –∞—Ä–∏–ª–≥–∞–∂ –±–∞–π–Ω–∞: '{group.name}' (ID: {group.id})"))

                conflicting_schools = School.objects.filter(group_id=group_id)
                school_to_keep = conflicting_schools.order_by('-id').first()

                if not school_to_keep:
                    continue

                self.stdout.write(f"  -> ‚úÖ “Æ–ª–¥—ç—ç–∂ –±–∞–π–Ω–∞: '{school_to_keep}' (ID: {school_to_keep.id})")

                schools_to_delete = conflicting_schools.exclude(id=school_to_keep.id)

                if schools_to_delete.exists():
                    for school in schools_to_delete:
                        self.stdout.write(self.style.WARNING(f"  -> üî¥ –£–°–¢–ì–ê–ñ –ë–ê–ô–ù–ê: '{school}' (ID: {school.id})"))

                    deleted_count, _ = schools_to_delete.delete()
                    total_deleted += deleted_count

            except Group.DoesNotExist:
                 self.stdout.write(self.style.ERROR(f"\n- ID {group_id} –±“Ø—Ö–∏–π –±“Ø–ª—ç–≥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π."))

        self.stdout.write(self.style.SUCCESS(f"\n--- –î“Æ–ù ---"))
        self.stdout.write(self.style.SUCCESS(
            f"–ê–º–∂–∏–ª—Ç—Ç–∞–π: –ù–∏–π—Ç {total_deleted} —Å—É—Ä–≥—É—É–ª–∏–π–Ω –∏–ª“Ø“Ø–¥—ç–ª –±–∏—á–ª—ç–≥–∏–π–≥ —É—Å—Ç–≥–∞–ª–∞–∞."
        ))
        self.stdout.write(self.style.SUCCESS(
            "–û–¥–æ–æ 'python manage.py migrate' –∫–æ–º–º–∞–Ω–¥—ã–≥ –∞–∂–∏–ª–ª—É—É–ª–∂ –±–æ–ª–Ω–æ."
        ))